=============
LIBRARIES
=============


#include <stdio.h>      /* input, output    */
#include <math.h>       /* math library     */
#include <stdlib.h>     /* calloc, malloc...*/



#include <limits.h>     /* limits of data types */


===========
NOTES
===========

#define NAME value 
    Preprocessing directive: Replaces all instances of NAME with value.

Variable names are case sensitive.

Declarations don't need to be at the beginning of a function, they can be
everywhere in the code.

char assignment:
    needs apostrophe ',quote marks " don't work

booleans:
    There are no custom built-in boolean types. Use int instead. (There is
    however a <stdbool.h> in C99...)
    This works: int i = 1; then !i = 0; !(!i) = 1
    REMEMBER: true = 1 (!= 0); false = 0 

return value of assignment
    i = 5; returns 5
    This is so that a = b = c; can work

scope of names:
    imagine following scenario:
        int one(blabla){...};
        int two(int one, ...){...};
        int main(void){...};

        then main can access one and two, one can access two, but two can't
        access one because "one" is also used as a formal parameter name in the
        function two.

arrays
    arrays are not passed as a copy, but as pointers!

Strings
    C implements strings as arrays of chars.
    The "\0" character marks the end of a string.

Functions
    You can't define functions within functions, but you can declare them.
    So this:
        int main(void) {
            ...
        }
        void somefunc1(void) { 
            void somefunc2 (void){
            ...
            } 
        ...
        }
    doesn't work; but this will:
        int main(void) {
        ...
        }
        void somefunc1(void) { 
            void somefunc2 (void);
            ... 
            }
        void somefunc2(void) {
        ...
        }  



calloc vs malloc:
    calloc initiates array to zeros; malloc doesn't.




=========================
GCC Compiling flags
=========================

-0level
    -O0 	optimization for compilation time (default), not execution time 	
    -O1 or -O 	optimization for code size and execution time
    -O2 	optimize more for code size and execution time
    -O3 	optimize even more for code size and execution time 
    -Os 	optimization for code size 	
    -Ofast 	O3 with fast none accurate math calculations 
    -Og     Optimize debugging experience. Enables optimizations that do not 
               interfere with debugging.

-Wall
    This enables all the warnings about constructions that some users consider
    questionable, and that are easy to avoid (or modify to prevent the 
    warning), even in conjunction with macros. This also enables some 
    language-specific warnings

-Wextra
    This enables some extra warning flags that are not enabled by -Wall


