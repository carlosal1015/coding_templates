  /$$$$$$  /$$$$$$ /$$$$$$$$       /$$   /$$  /$$$$$$  /$$$$$$$$ /$$$$$$$$  /$$$$$$ 
 /$$__  $$|_  $$_/|__  $$__/      | $$$ | $$ /$$__  $$|__  $$__/| $$_____/ /$$__  $$
| $$  \__/  | $$     | $$         | $$$$| $$| $$  \ $$   | $$   | $$      | $$  \__/
| $$ /$$$$  | $$     | $$         | $$ $$ $$| $$  | $$   | $$   | $$$$$   |  $$$$$$ 
| $$|_  $$  | $$     | $$         | $$  $$$$| $$  | $$   | $$   | $$__/    \____  $$
| $$  \ $$  | $$     | $$         | $$\  $$$| $$  | $$   | $$   | $$       /$$  \ $$
|  $$$$$$/ /$$$$$$   | $$         | $$ \  $$|  $$$$$$/   | $$   | $$$$$$$$|  $$$$$$/
 \______/ |______/   |__/         |__/  \__/ \______/    |__/   |________/ \______/ 



git add
    Add a new file for commit

git commit -m "Your commit message"
    commit all added files

git push
    push all commits to remote repo

git pull
    pull all new commits from remote repo

git checkout <branchname>
    switch to branch <branchname>

git checkout "COMMIT_ID" -- somefile.txt
    "revert" somefile.txt to version of "COMMIT_ID"

git diff-tree --no-commit-id --name-only -r "COMMIT_ID"
    show which files were included in commit 

git diff HEAD^^ HEAD main.c
    compare versions of files. Here: third to last commit with last commit.
    
    
git diff --name-only
    show names of changed files
    
git add -u
    add all modified files, ignore untracked files
    
git rebase -i
    interactive rebase; allows you to modify history, squash commits etc



contributing to a project:
  (- fork the project)
  (- create a new branch)
  (- switch to new branch: 
        git branch some-name)
    - update branch to master
        git fetch master
    - do your things
    - push changes to your remote
        git push origin branchname
    - create a pull request online
    
    
    
count individual line changes between two commits

 $ git log --numstat --pretty="%H"  9e6654be8..HEAD | awk 'NF==3 {plus+=$1; minus+=$2} END {printf("+%d, -%d\n", plus, minus)}'
(older commit needs to be first)
